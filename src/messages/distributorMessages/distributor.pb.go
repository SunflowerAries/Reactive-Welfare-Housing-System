// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Reactive-Welfare-Housing-System/src/messages/distributor.proto

package distributorMessages

import (
	verifierMessages "Reactive-Welfare-Housing-System/src/messages/verifierMessages"
	fmt "fmt"
	actor "github.com/ChaokunChang/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HouseApplicationReject struct {
	Request *verifierMessages.HouseApplicationRequest `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Reason  string                                    `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *HouseApplicationReject) Reset()      { *m = HouseApplicationReject{} }
func (*HouseApplicationReject) ProtoMessage() {}
func (*HouseApplicationReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7dd0a5d8c1081a8, []int{0}
}
func (m *HouseApplicationReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseApplicationReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseApplicationReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseApplicationReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseApplicationReject.Merge(m, src)
}
func (m *HouseApplicationReject) XXX_Size() int {
	return m.Size()
}
func (m *HouseApplicationReject) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseApplicationReject.DiscardUnknown(m)
}

var xxx_messageInfo_HouseApplicationReject proto.InternalMessageInfo

func (m *HouseApplicationReject) GetRequest() *verifierMessages.HouseApplicationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *HouseApplicationReject) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type NewHousesACK struct {
}

func (m *NewHousesACK) Reset()      { *m = NewHousesACK{} }
func (*NewHousesACK) ProtoMessage() {}
func (*NewHousesACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7dd0a5d8c1081a8, []int{1}
}
func (m *NewHousesACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewHousesACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewHousesACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewHousesACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewHousesACK.Merge(m, src)
}
func (m *NewHousesACK) XXX_Size() int {
	return m.Size()
}
func (m *NewHousesACK) XXX_DiscardUnknown() {
	xxx_messageInfo_NewHousesACK.DiscardUnknown(m)
}

var xxx_messageInfo_NewHousesACK proto.InternalMessageInfo

type HouseApplicationACK struct {
}

func (m *HouseApplicationACK) Reset()      { *m = HouseApplicationACK{} }
func (*HouseApplicationACK) ProtoMessage() {}
func (*HouseApplicationACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7dd0a5d8c1081a8, []int{2}
}
func (m *HouseApplicationACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseApplicationACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseApplicationACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseApplicationACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseApplicationACK.Merge(m, src)
}
func (m *HouseApplicationACK) XXX_Size() int {
	return m.Size()
}
func (m *HouseApplicationACK) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseApplicationACK.DiscardUnknown(m)
}

var xxx_messageInfo_HouseApplicationACK proto.InternalMessageInfo

type MatchEmptyHouse struct {
	Request *verifierMessages.HouseApplicationRequest `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	Sender  *actor.PID                                `protobuf:"bytes,2,opt,name=Sender,proto3" json:"Sender,omitempty"`
}

func (m *MatchEmptyHouse) Reset()      { *m = MatchEmptyHouse{} }
func (*MatchEmptyHouse) ProtoMessage() {}
func (*MatchEmptyHouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7dd0a5d8c1081a8, []int{3}
}
func (m *MatchEmptyHouse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchEmptyHouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchEmptyHouse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchEmptyHouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchEmptyHouse.Merge(m, src)
}
func (m *MatchEmptyHouse) XXX_Size() int {
	return m.Size()
}
func (m *MatchEmptyHouse) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchEmptyHouse.DiscardUnknown(m)
}

var xxx_messageInfo_MatchEmptyHouse proto.InternalMessageInfo

func (m *MatchEmptyHouse) GetRequest() *verifierMessages.HouseApplicationRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *MatchEmptyHouse) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type HouseCheckOutResponse struct {
	Answer string `protobuf:"bytes,1,opt,name=Answer,proto3" json:"Answer,omitempty"`
}

func (m *HouseCheckOutResponse) Reset()      { *m = HouseCheckOutResponse{} }
func (*HouseCheckOutResponse) ProtoMessage() {}
func (*HouseCheckOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7dd0a5d8c1081a8, []int{4}
}
func (m *HouseCheckOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseCheckOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseCheckOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseCheckOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseCheckOutResponse.Merge(m, src)
}
func (m *HouseCheckOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *HouseCheckOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseCheckOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HouseCheckOutResponse proto.InternalMessageInfo

func (m *HouseCheckOutResponse) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

type HouseCheckOut struct {
	FamilyID int32 `protobuf:"varint,1,opt,name=FamilyID,proto3" json:"FamilyID,omitempty"`
	HouseID  int32 `protobuf:"varint,2,opt,name=HouseID,proto3" json:"HouseID,omitempty"`
	Retry    bool  `protobuf:"varint,3,opt,name=Retry,proto3" json:"Retry,omitempty"`
}

func (m *HouseCheckOut) Reset()      { *m = HouseCheckOut{} }
func (*HouseCheckOut) ProtoMessage() {}
func (*HouseCheckOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7dd0a5d8c1081a8, []int{5}
}
func (m *HouseCheckOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseCheckOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseCheckOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseCheckOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseCheckOut.Merge(m, src)
}
func (m *HouseCheckOut) XXX_Size() int {
	return m.Size()
}
func (m *HouseCheckOut) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseCheckOut.DiscardUnknown(m)
}

var xxx_messageInfo_HouseCheckOut proto.InternalMessageInfo

func (m *HouseCheckOut) GetFamilyID() int32 {
	if m != nil {
		return m.FamilyID
	}
	return 0
}

func (m *HouseCheckOut) GetHouseID() int32 {
	if m != nil {
		return m.HouseID
	}
	return 0
}

func (m *HouseCheckOut) GetRetry() bool {
	if m != nil {
		return m.Retry
	}
	return false
}

type HouseCheckOutACK struct {
}

func (m *HouseCheckOutACK) Reset()      { *m = HouseCheckOutACK{} }
func (*HouseCheckOutACK) ProtoMessage() {}
func (*HouseCheckOutACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7dd0a5d8c1081a8, []int{6}
}
func (m *HouseCheckOutACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseCheckOutACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseCheckOutACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseCheckOutACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseCheckOutACK.Merge(m, src)
}
func (m *HouseCheckOutACK) XXX_Size() int {
	return m.Size()
}
func (m *HouseCheckOutACK) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseCheckOutACK.DiscardUnknown(m)
}

var xxx_messageInfo_HouseCheckOutACK proto.InternalMessageInfo

type UnqualifiedHousesACK struct {
}

func (m *UnqualifiedHousesACK) Reset()      { *m = UnqualifiedHousesACK{} }
func (*UnqualifiedHousesACK) ProtoMessage() {}
func (*UnqualifiedHousesACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7dd0a5d8c1081a8, []int{7}
}
func (m *UnqualifiedHousesACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnqualifiedHousesACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnqualifiedHousesACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnqualifiedHousesACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnqualifiedHousesACK.Merge(m, src)
}
func (m *UnqualifiedHousesACK) XXX_Size() int {
	return m.Size()
}
func (m *UnqualifiedHousesACK) XXX_DiscardUnknown() {
	xxx_messageInfo_UnqualifiedHousesACK.DiscardUnknown(m)
}

var xxx_messageInfo_UnqualifiedHousesACK proto.InternalMessageInfo

type HouseMatch struct {
	FamilyID int32 `protobuf:"varint,1,opt,name=FamilyID,proto3" json:"FamilyID,omitempty"`
	HouseID  int32 `protobuf:"varint,2,opt,name=HouseID,proto3" json:"HouseID,omitempty"`
	Level    int32 `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (m *HouseMatch) Reset()      { *m = HouseMatch{} }
func (*HouseMatch) ProtoMessage() {}
func (*HouseMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7dd0a5d8c1081a8, []int{8}
}
func (m *HouseMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseMatch.Merge(m, src)
}
func (m *HouseMatch) XXX_Size() int {
	return m.Size()
}
func (m *HouseMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseMatch.DiscardUnknown(m)
}

var xxx_messageInfo_HouseMatch proto.InternalMessageInfo

func (m *HouseMatch) GetFamilyID() int32 {
	if m != nil {
		return m.FamilyID
	}
	return 0
}

func (m *HouseMatch) GetHouseID() int32 {
	if m != nil {
		return m.HouseID
	}
	return 0
}

func (m *HouseMatch) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func init() {
	proto.RegisterType((*HouseApplicationReject)(nil), "distributor.HouseApplicationReject")
	proto.RegisterType((*NewHousesACK)(nil), "distributor.NewHousesACK")
	proto.RegisterType((*HouseApplicationACK)(nil), "distributor.HouseApplicationACK")
	proto.RegisterType((*MatchEmptyHouse)(nil), "distributor.MatchEmptyHouse")
	proto.RegisterType((*HouseCheckOutResponse)(nil), "distributor.HouseCheckOutResponse")
	proto.RegisterType((*HouseCheckOut)(nil), "distributor.HouseCheckOut")
	proto.RegisterType((*HouseCheckOutACK)(nil), "distributor.HouseCheckOutACK")
	proto.RegisterType((*UnqualifiedHousesACK)(nil), "distributor.UnqualifiedHousesACK")
	proto.RegisterType((*HouseMatch)(nil), "distributor.HouseMatch")
}

func init() {
	proto.RegisterFile("Reactive-Welfare-Housing-System/src/messages/distributor.proto", fileDescriptor_f7dd0a5d8c1081a8)
}

var fileDescriptor_f7dd0a5d8c1081a8 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xf4, 0x82, 0x92, 0xb6, 0x5f, 0xf8, 0x93, 0x69, 0xa3, 0x28, 0x87, 0x55, 0xf0, 0x29, 0x97,
	0xc4, 0x52, 0xb9, 0x20, 0x55, 0x42, 0x84, 0x04, 0x44, 0x04, 0x05, 0xb4, 0x15, 0x02, 0xc1, 0x69,
	0xe3, 0x7c, 0xb5, 0x97, 0xda, 0x5e, 0x77, 0x77, 0x9d, 0x2a, 0x37, 0x1e, 0x81, 0xc7, 0xe0, 0x51,
	0x38, 0xe6, 0xd8, 0x23, 0x71, 0x2e, 0x1c, 0xfb, 0x08, 0xc8, 0x1b, 0xb7, 0x50, 0x38, 0xd1, 0xde,
	0x3c, 0xe3, 0x99, 0xf1, 0xec, 0xc8, 0x0b, 0x8f, 0x19, 0xf2, 0xc0, 0x88, 0x19, 0xf6, 0xde, 0x63,
	0x7c, 0xc8, 0x15, 0xf6, 0x5e, 0xc8, 0x5c, 0x8b, 0x34, 0xec, 0x1d, 0xcc, 0xb5, 0xc1, 0xc4, 0xd7,
	0x2a, 0xf0, 0x13, 0xd4, 0x9a, 0x87, 0xa8, 0xfd, 0xa9, 0xd0, 0x46, 0x89, 0x49, 0x6e, 0xa4, 0xea,
	0x67, 0x4a, 0x1a, 0xe9, 0x36, 0xfe, 0xa0, 0xda, 0x8f, 0x42, 0x61, 0xa2, 0x7c, 0xd2, 0x0f, 0x64,
	0xe2, 0x0f, 0x23, 0x2e, 0x8f, 0xf2, 0x74, 0x18, 0xf1, 0x34, 0xf4, 0xad, 0x96, 0x07, 0x46, 0xaa,
	0x5e, 0x28, 0x7d, 0xfb, 0xb0, 0xe6, 0xf4, 0x3a, 0xa6, 0xbd, 0xf7, 0x5f, 0x35, 0x66, 0xa8, 0xc4,
	0xa1, 0xc0, 0xaa, 0x83, 0x97, 0x40, 0xb3, 0x54, 0xe3, 0x20, 0xcb, 0x62, 0x11, 0x70, 0x23, 0x64,
	0xca, 0xf0, 0x33, 0x06, 0xc6, 0xdd, 0x83, 0x0d, 0x86, 0xc7, 0x39, 0x6a, 0xd3, 0x22, 0x1d, 0xd2,
	0x6d, 0xec, 0x3e, 0xe8, 0x5f, 0x78, 0xff, 0xb5, 0x58, 0x21, 0x3b, 0x77, 0xb8, 0x4d, 0xa8, 0x33,
	0xe4, 0x5a, 0xa6, 0xad, 0x1b, 0x1d, 0xd2, 0xdd, 0x62, 0x15, 0xf2, 0xee, 0xc0, 0xad, 0xd7, 0x78,
	0x62, 0xed, 0x7a, 0x30, 0x7c, 0xe9, 0xed, 0xc0, 0xfd, 0xbf, 0xb3, 0x4a, 0x5a, 0xc1, 0xdd, 0x7d,
	0x6e, 0x82, 0xe8, 0x59, 0x92, 0x99, 0xb9, 0x15, 0x5c, 0xaf, 0x8e, 0x07, 0xf5, 0x03, 0x4c, 0xa7,
	0xa8, 0x6c, 0x9d, 0xc6, 0x2e, 0xf4, 0xed, 0x8e, 0xfd, 0xb7, 0xe3, 0x11, 0xab, 0xde, 0x78, 0x3e,
	0xec, 0xd8, 0x9c, 0x61, 0x84, 0xc1, 0xd1, 0x9b, 0xdc, 0x30, 0xd4, 0x99, 0x4c, 0x35, 0x96, 0x67,
	0x19, 0xa4, 0xfa, 0x04, 0x95, 0xfd, 0xf0, 0x16, 0xab, 0x90, 0xf7, 0x09, 0x6e, 0x5f, 0x32, 0xb8,
	0x6d, 0xd8, 0x7c, 0xce, 0x13, 0x11, 0xcf, 0xc7, 0x23, 0x2b, 0xad, 0xb1, 0x0b, 0xec, 0xb6, 0x60,
	0xc3, 0x8a, 0xc7, 0x23, 0x5b, 0xa1, 0xc6, 0xce, 0xa1, 0xbb, 0x0d, 0x35, 0x86, 0x46, 0xcd, 0x5b,
	0x37, 0x3b, 0xa4, 0xbb, 0xc9, 0xd6, 0xc0, 0x73, 0xe1, 0xde, 0xa5, 0xf0, 0x72, 0x95, 0x26, 0x6c,
	0xbf, 0x4b, 0x8f, 0x73, 0x1e, 0x97, 0xa7, 0x9e, 0xfe, 0x1e, 0xf1, 0x03, 0x80, 0x05, 0x76, 0xb2,
	0xab, 0xb7, 0x78, 0x85, 0x33, 0x8c, 0x6d, 0x8b, 0x1a, 0x5b, 0x83, 0xa7, 0xb3, 0xc5, 0x92, 0x3a,
	0xa7, 0x4b, 0xea, 0x9c, 0x2d, 0x29, 0xf9, 0x52, 0x50, 0xf2, 0xad, 0xa0, 0xe4, 0x7b, 0x41, 0xc9,
	0xa2, 0xa0, 0xe4, 0x47, 0x41, 0xc9, 0xcf, 0x82, 0x3a, 0x67, 0x05, 0x25, 0x5f, 0x57, 0xd4, 0x59,
	0xac, 0xa8, 0x73, 0xba, 0xa2, 0xce, 0xc7, 0x27, 0x57, 0xbd, 0x17, 0xfb, 0x15, 0x37, 0xa9, 0xdb,
	0x9f, 0xf3, 0xe1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xc6, 0x70, 0xb8, 0x62, 0x03, 0x00,
	0x00,
}

func (this *HouseApplicationReject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseApplicationReject)
	if !ok {
		that2, ok := that.(HouseApplicationReject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *NewHousesACK) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewHousesACK)
	if !ok {
		that2, ok := that.(NewHousesACK)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HouseApplicationACK) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseApplicationACK)
	if !ok {
		that2, ok := that.(HouseApplicationACK)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MatchEmptyHouse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MatchEmptyHouse)
	if !ok {
		that2, ok := that.(MatchEmptyHouse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *HouseCheckOutResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseCheckOutResponse)
	if !ok {
		that2, ok := that.(HouseCheckOutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Answer != that1.Answer {
		return false
	}
	return true
}
func (this *HouseCheckOut) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseCheckOut)
	if !ok {
		that2, ok := that.(HouseCheckOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FamilyID != that1.FamilyID {
		return false
	}
	if this.HouseID != that1.HouseID {
		return false
	}
	if this.Retry != that1.Retry {
		return false
	}
	return true
}
func (this *HouseCheckOutACK) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseCheckOutACK)
	if !ok {
		that2, ok := that.(HouseCheckOutACK)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UnqualifiedHousesACK) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnqualifiedHousesACK)
	if !ok {
		that2, ok := that.(UnqualifiedHousesACK)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HouseMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseMatch)
	if !ok {
		that2, ok := that.(HouseMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FamilyID != that1.FamilyID {
		return false
	}
	if this.HouseID != that1.HouseID {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *HouseApplicationReject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&distributorMessages.HouseApplicationReject{")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewHousesACK) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&distributorMessages.NewHousesACK{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseApplicationACK) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&distributorMessages.HouseApplicationACK{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MatchEmptyHouse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&distributorMessages.MatchEmptyHouse{")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseCheckOutResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&distributorMessages.HouseCheckOutResponse{")
	s = append(s, "Answer: "+fmt.Sprintf("%#v", this.Answer)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseCheckOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&distributorMessages.HouseCheckOut{")
	s = append(s, "FamilyID: "+fmt.Sprintf("%#v", this.FamilyID)+",\n")
	s = append(s, "HouseID: "+fmt.Sprintf("%#v", this.HouseID)+",\n")
	s = append(s, "Retry: "+fmt.Sprintf("%#v", this.Retry)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseCheckOutACK) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&distributorMessages.HouseCheckOutACK{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnqualifiedHousesACK) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&distributorMessages.UnqualifiedHousesACK{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&distributorMessages.HouseMatch{")
	s = append(s, "FamilyID: "+fmt.Sprintf("%#v", this.FamilyID)+",\n")
	s = append(s, "HouseID: "+fmt.Sprintf("%#v", this.HouseID)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringDistributor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HouseApplicationReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseApplicationReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseApplicationReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintDistributor(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDistributor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewHousesACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewHousesACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewHousesACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HouseApplicationACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseApplicationACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseApplicationACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MatchEmptyHouse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchEmptyHouse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MatchEmptyHouse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDistributor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDistributor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HouseCheckOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseCheckOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseCheckOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Answer) > 0 {
		i -= len(m.Answer)
		copy(dAtA[i:], m.Answer)
		i = encodeVarintDistributor(dAtA, i, uint64(len(m.Answer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HouseCheckOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseCheckOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseCheckOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Retry {
		i--
		if m.Retry {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.HouseID != 0 {
		i = encodeVarintDistributor(dAtA, i, uint64(m.HouseID))
		i--
		dAtA[i] = 0x10
	}
	if m.FamilyID != 0 {
		i = encodeVarintDistributor(dAtA, i, uint64(m.FamilyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HouseCheckOutACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseCheckOutACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseCheckOutACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UnqualifiedHousesACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnqualifiedHousesACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnqualifiedHousesACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HouseMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintDistributor(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.HouseID != 0 {
		i = encodeVarintDistributor(dAtA, i, uint64(m.HouseID))
		i--
		dAtA[i] = 0x10
	}
	if m.FamilyID != 0 {
		i = encodeVarintDistributor(dAtA, i, uint64(m.FamilyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDistributor(dAtA []byte, offset int, v uint64) int {
	offset -= sovDistributor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HouseApplicationReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovDistributor(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovDistributor(uint64(l))
	}
	return n
}

func (m *NewHousesACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HouseApplicationACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MatchEmptyHouse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovDistributor(uint64(l))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovDistributor(uint64(l))
	}
	return n
}

func (m *HouseCheckOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Answer)
	if l > 0 {
		n += 1 + l + sovDistributor(uint64(l))
	}
	return n
}

func (m *HouseCheckOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FamilyID != 0 {
		n += 1 + sovDistributor(uint64(m.FamilyID))
	}
	if m.HouseID != 0 {
		n += 1 + sovDistributor(uint64(m.HouseID))
	}
	if m.Retry {
		n += 2
	}
	return n
}

func (m *HouseCheckOutACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UnqualifiedHousesACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HouseMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FamilyID != 0 {
		n += 1 + sovDistributor(uint64(m.FamilyID))
	}
	if m.HouseID != 0 {
		n += 1 + sovDistributor(uint64(m.HouseID))
	}
	if m.Level != 0 {
		n += 1 + sovDistributor(uint64(m.Level))
	}
	return n
}

func sovDistributor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDistributor(x uint64) (n int) {
	return sovDistributor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HouseApplicationReject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseApplicationReject{`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "HouseApplicationRequest", "verifierMessages.HouseApplicationRequest", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewHousesACK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewHousesACK{`,
		`}`,
	}, "")
	return s
}
func (this *HouseApplicationACK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseApplicationACK{`,
		`}`,
	}, "")
	return s
}
func (this *MatchEmptyHouse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchEmptyHouse{`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "HouseApplicationRequest", "verifierMessages.HouseApplicationRequest", 1) + `,`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HouseCheckOutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseCheckOutResponse{`,
		`Answer:` + fmt.Sprintf("%v", this.Answer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HouseCheckOut) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseCheckOut{`,
		`FamilyID:` + fmt.Sprintf("%v", this.FamilyID) + `,`,
		`HouseID:` + fmt.Sprintf("%v", this.HouseID) + `,`,
		`Retry:` + fmt.Sprintf("%v", this.Retry) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HouseCheckOutACK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseCheckOutACK{`,
		`}`,
	}, "")
	return s
}
func (this *UnqualifiedHousesACK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnqualifiedHousesACK{`,
		`}`,
	}, "")
	return s
}
func (this *HouseMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseMatch{`,
		`FamilyID:` + fmt.Sprintf("%v", this.FamilyID) + `,`,
		`HouseID:` + fmt.Sprintf("%v", this.HouseID) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDistributor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HouseApplicationReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseApplicationReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseApplicationReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &verifierMessages.HouseApplicationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewHousesACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewHousesACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewHousesACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseApplicationACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseApplicationACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseApplicationACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchEmptyHouse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchEmptyHouse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchEmptyHouse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &verifierMessages.HouseApplicationRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistributor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseCheckOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseCheckOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseCheckOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDistributor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDistributor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseCheckOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseCheckOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseCheckOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyID", wireType)
			}
			m.FamilyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseID", wireType)
			}
			m.HouseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HouseID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Retry = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseCheckOutACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseCheckOutACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseCheckOutACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnqualifiedHousesACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnqualifiedHousesACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnqualifiedHousesACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyID", wireType)
			}
			m.FamilyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseID", wireType)
			}
			m.HouseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HouseID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDistributor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDistributor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDistributor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDistributor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistributor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDistributor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDistributor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDistributor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDistributor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDistributor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDistributor = fmt.Errorf("proto: unexpected end of group")
)
