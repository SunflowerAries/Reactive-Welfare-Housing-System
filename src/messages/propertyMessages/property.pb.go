// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Reactive-Welfare-Housing-System/src/messages/property.proto

package propertyMessages

import (
	fmt "fmt"
	_ "github.com/ChaokunChang/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExaminationACK struct {
}

func (m *ExaminationACK) Reset()      { *m = ExaminationACK{} }
func (*ExaminationACK) ProtoMessage() {}
func (*ExaminationACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ae78403c26def3, []int{0}
}
func (m *ExaminationACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExaminationACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExaminationACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExaminationACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExaminationACK.Merge(m, src)
}
func (m *ExaminationACK) XXX_Size() int {
	return m.Size()
}
func (m *ExaminationACK) XXX_DiscardUnknown() {
	xxx_messageInfo_ExaminationACK.DiscardUnknown(m)
}

var xxx_messageInfo_ExaminationACK proto.InternalMessageInfo

type ExaminationRejects struct {
	HouseID []int32 `protobuf:"varint,1,rep,packed,name=HouseID,proto3" json:"HouseID,omitempty"`
}

func (m *ExaminationRejects) Reset()      { *m = ExaminationRejects{} }
func (*ExaminationRejects) ProtoMessage() {}
func (*ExaminationRejects) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0ae78403c26def3, []int{1}
}
func (m *ExaminationRejects) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExaminationRejects) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExaminationRejects.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExaminationRejects) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExaminationRejects.Merge(m, src)
}
func (m *ExaminationRejects) XXX_Size() int {
	return m.Size()
}
func (m *ExaminationRejects) XXX_DiscardUnknown() {
	xxx_messageInfo_ExaminationRejects.DiscardUnknown(m)
}

var xxx_messageInfo_ExaminationRejects proto.InternalMessageInfo

func (m *ExaminationRejects) GetHouseID() []int32 {
	if m != nil {
		return m.HouseID
	}
	return nil
}

func init() {
	proto.RegisterType((*ExaminationACK)(nil), "property.ExaminationACK")
	proto.RegisterType((*ExaminationRejects)(nil), "property.ExaminationRejects")
}

func init() {
	proto.RegisterFile("Reactive-Welfare-Housing-System/src/messages/property.proto", fileDescriptor_a0ae78403c26def3)
}

var fileDescriptor_a0ae78403c26def3 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x0e, 0x4a, 0x4d, 0x4c,
	0x2e, 0xc9, 0x2c, 0x4b, 0xd5, 0x0d, 0x4f, 0xcd, 0x49, 0x4b, 0x2c, 0x4a, 0xd5, 0xf5, 0xc8, 0x2f,
	0x2d, 0xce, 0xcc, 0x4b, 0xd7, 0x0d, 0xae, 0x2c, 0x2e, 0x49, 0xcd, 0xd5, 0x2f, 0x2e, 0x4a, 0xd6,
	0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x2d, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0x48, 0x2d, 0x2a,
	0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0x2c, 0xd2, 0x33, 0x4b,
	0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x9d, 0x33, 0x12, 0xf3, 0xb3, 0x4b, 0xf3, 0x9c,
	0x33, 0x12, 0xf3, 0xd2, 0xf5, 0xc1, 0x0a, 0x13, 0x93, 0x4b, 0xf2, 0x8b, 0x74, 0xd3, 0xf3, 0xf5,
	0xc1, 0x0c, 0x88, 0x58, 0x31, 0xc4, 0x0c, 0x25, 0x01, 0x2e, 0x3e, 0xd7, 0x8a, 0xc4, 0xdc, 0xcc,
	0xbc, 0xc4, 0x92, 0xcc, 0xfc, 0x3c, 0x47, 0x67, 0x6f, 0x25, 0x3d, 0x2e, 0x21, 0x24, 0x91, 0xa0,
	0xd4, 0xac, 0xd4, 0xe4, 0x92, 0x62, 0x21, 0x09, 0x2e, 0x76, 0x90, 0xcb, 0x52, 0x3d, 0x5d, 0x24,
	0x18, 0x15, 0x98, 0x35, 0x58, 0x83, 0x60, 0x5c, 0xa7, 0xe2, 0x0b, 0x0f, 0xe5, 0x18, 0x6e, 0x3c,
	0x94, 0x63, 0xf8, 0xf0, 0x50, 0x8e, 0xb1, 0xe1, 0x91, 0x1c, 0xe3, 0x8a, 0x47, 0x72, 0x8c, 0x27,
	0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8b, 0x47, 0x72, 0x0c,
	0x1f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0xb6, 0x64, 0x79, 0xdc, 0x17, 0x2a, 0x90, 0xc4, 0x06, 0x76, 0xbd, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0xa4, 0x70, 0x6f, 0x48, 0x40, 0x01, 0x00, 0x00,
}

func (this *ExaminationACK) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExaminationACK)
	if !ok {
		that2, ok := that.(ExaminationACK)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ExaminationRejects) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExaminationRejects)
	if !ok {
		that2, ok := that.(ExaminationRejects)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HouseID) != len(that1.HouseID) {
		return false
	}
	for i := range this.HouseID {
		if this.HouseID[i] != that1.HouseID[i] {
			return false
		}
	}
	return true
}
func (this *ExaminationACK) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&propertyMessages.ExaminationACK{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExaminationRejects) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&propertyMessages.ExaminationRejects{")
	s = append(s, "HouseID: "+fmt.Sprintf("%#v", this.HouseID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProperty(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ExaminationACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExaminationACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExaminationACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ExaminationRejects) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExaminationRejects) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExaminationRejects) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HouseID) > 0 {
		dAtA2 := make([]byte, len(m.HouseID)*10)
		var j1 int
		for _, num1 := range m.HouseID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintProperty(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProperty(dAtA []byte, offset int, v uint64) int {
	offset -= sovProperty(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExaminationACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExaminationRejects) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HouseID) > 0 {
		l = 0
		for _, e := range m.HouseID {
			l += sovProperty(uint64(e))
		}
		n += 1 + sovProperty(uint64(l)) + l
	}
	return n
}

func sovProperty(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProperty(x uint64) (n int) {
	return sovProperty(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ExaminationACK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExaminationACK{`,
		`}`,
	}, "")
	return s
}
func (this *ExaminationRejects) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExaminationRejects{`,
		`HouseID:` + fmt.Sprintf("%v", this.HouseID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProperty(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ExaminationACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProperty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExaminationACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExaminationACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProperty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProperty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProperty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExaminationRejects) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProperty
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExaminationRejects: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExaminationRejects: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProperty
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HouseID = append(m.HouseID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProperty
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProperty
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProperty
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.HouseID) == 0 {
					m.HouseID = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProperty
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HouseID = append(m.HouseID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProperty(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProperty
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProperty
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProperty(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProperty
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProperty
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProperty
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProperty
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProperty
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProperty        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProperty          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProperty = fmt.Errorf("proto: unexpected end of group")
)
