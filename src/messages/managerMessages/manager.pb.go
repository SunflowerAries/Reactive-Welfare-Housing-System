// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Reactive-Welfare-Housing-System/src/messages/manager.proto

package managerMessages

import (
	distributorMessages "Reactive-Welfare-Housing-System/src/messages/distributorMessages"
	_ "Reactive-Welfare-Housing-System/src/messages/propertyMessages"
	sharedMessages "Reactive-Welfare-Housing-System/src/messages/sharedMessages"
	fmt "fmt"
	_ "github.com/ChaokunChang/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HouseMatchApprove struct {
	Match *distributorMessages.HouseMatch `protobuf:"bytes,1,opt,name=Match,proto3" json:"Match,omitempty"`
}

func (m *HouseMatchApprove) Reset()      { *m = HouseMatchApprove{} }
func (*HouseMatchApprove) ProtoMessage() {}
func (*HouseMatchApprove) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{0}
}
func (m *HouseMatchApprove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseMatchApprove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseMatchApprove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseMatchApprove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseMatchApprove.Merge(m, src)
}
func (m *HouseMatchApprove) XXX_Size() int {
	return m.Size()
}
func (m *HouseMatchApprove) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseMatchApprove.DiscardUnknown(m)
}

var xxx_messageInfo_HouseMatchApprove proto.InternalMessageInfo

func (m *HouseMatchApprove) GetMatch() *distributorMessages.HouseMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

type HouseCheckOut struct {
	CheckOut *distributorMessages.HouseCheckOut `protobuf:"bytes,1,opt,name=CheckOut,proto3" json:"CheckOut,omitempty"`
}

func (m *HouseCheckOut) Reset()      { *m = HouseCheckOut{} }
func (*HouseCheckOut) ProtoMessage() {}
func (*HouseCheckOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{1}
}
func (m *HouseCheckOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseCheckOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseCheckOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseCheckOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseCheckOut.Merge(m, src)
}
func (m *HouseCheckOut) XXX_Size() int {
	return m.Size()
}
func (m *HouseCheckOut) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseCheckOut.DiscardUnknown(m)
}

var xxx_messageInfo_HouseCheckOut proto.InternalMessageInfo

func (m *HouseCheckOut) GetCheckOut() *distributorMessages.HouseCheckOut {
	if m != nil {
		return m.CheckOut
	}
	return nil
}

type HouseMatchReject struct {
	Match  *distributorMessages.HouseMatch `protobuf:"bytes,1,opt,name=Match,proto3" json:"Match,omitempty"`
	Reason int32                           `protobuf:"varint,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *HouseMatchReject) Reset()      { *m = HouseMatchReject{} }
func (*HouseMatchReject) ProtoMessage() {}
func (*HouseMatchReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{2}
}
func (m *HouseMatchReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseMatchReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseMatchReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseMatchReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseMatchReject.Merge(m, src)
}
func (m *HouseMatchReject) XXX_Size() int {
	return m.Size()
}
func (m *HouseMatchReject) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseMatchReject.DiscardUnknown(m)
}

var xxx_messageInfo_HouseMatchReject proto.InternalMessageInfo

func (m *HouseMatchReject) GetMatch() *distributorMessages.HouseMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HouseMatchReject) GetReason() int32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type NewHouses struct {
	Houses *sharedMessages.NewHouses `protobuf:"bytes,1,opt,name=Houses,proto3" json:"Houses,omitempty"`
}

func (m *NewHouses) Reset()      { *m = NewHouses{} }
func (*NewHouses) ProtoMessage() {}
func (*NewHouses) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{3}
}
func (m *NewHouses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewHouses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewHouses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewHouses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewHouses.Merge(m, src)
}
func (m *NewHouses) XXX_Size() int {
	return m.Size()
}
func (m *NewHouses) XXX_DiscardUnknown() {
	xxx_messageInfo_NewHouses.DiscardUnknown(m)
}

var xxx_messageInfo_NewHouses proto.InternalMessageInfo

func (m *NewHouses) GetHouses() *sharedMessages.NewHouses {
	if m != nil {
		return m.Houses
	}
	return nil
}

type HouseMatchACK struct {
}

func (m *HouseMatchACK) Reset()      { *m = HouseMatchACK{} }
func (*HouseMatchACK) ProtoMessage() {}
func (*HouseMatchACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{4}
}
func (m *HouseMatchACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseMatchACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseMatchACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseMatchACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseMatchACK.Merge(m, src)
}
func (m *HouseMatchACK) XXX_Size() int {
	return m.Size()
}
func (m *HouseMatchACK) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseMatchACK.DiscardUnknown(m)
}

var xxx_messageInfo_HouseMatchACK proto.InternalMessageInfo

type HouseCheckOutACK struct {
	HouseID int32 `protobuf:"varint,1,opt,name=HouseID,proto3" json:"HouseID,omitempty"`
}

func (m *HouseCheckOutACK) Reset()      { *m = HouseCheckOutACK{} }
func (*HouseCheckOutACK) ProtoMessage() {}
func (*HouseCheckOutACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{5}
}
func (m *HouseCheckOutACK) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseCheckOutACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseCheckOutACK.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseCheckOutACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseCheckOutACK.Merge(m, src)
}
func (m *HouseCheckOutACK) XXX_Size() int {
	return m.Size()
}
func (m *HouseCheckOutACK) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseCheckOutACK.DiscardUnknown(m)
}

var xxx_messageInfo_HouseCheckOutACK proto.InternalMessageInfo

func (m *HouseCheckOutACK) GetHouseID() int32 {
	if m != nil {
		return m.HouseID
	}
	return 0
}

type ExaminationReject struct {
	HouseID  int32 `protobuf:"varint,1,opt,name=HouseID,proto3" json:"HouseID,omitempty"`
	Age      int32 `protobuf:"varint,2,opt,name=Age,proto3" json:"Age,omitempty"`
	Area     int32 `protobuf:"varint,3,opt,name=Area,proto3" json:"Area,omitempty"`
	Level    int32 `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	FamilyID int32 `protobuf:"varint,5,opt,name=FamilyID,proto3" json:"FamilyID,omitempty"`
}

func (m *ExaminationReject) Reset()      { *m = ExaminationReject{} }
func (*ExaminationReject) ProtoMessage() {}
func (*ExaminationReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{6}
}
func (m *ExaminationReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExaminationReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExaminationReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExaminationReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExaminationReject.Merge(m, src)
}
func (m *ExaminationReject) XXX_Size() int {
	return m.Size()
}
func (m *ExaminationReject) XXX_DiscardUnknown() {
	xxx_messageInfo_ExaminationReject.DiscardUnknown(m)
}

var xxx_messageInfo_ExaminationReject proto.InternalMessageInfo

func (m *ExaminationReject) GetHouseID() int32 {
	if m != nil {
		return m.HouseID
	}
	return 0
}

func (m *ExaminationReject) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *ExaminationReject) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *ExaminationReject) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ExaminationReject) GetFamilyID() int32 {
	if m != nil {
		return m.FamilyID
	}
	return 0
}

type UnqualifiedHouses struct {
	Houses []*ExaminationReject `protobuf:"bytes,1,rep,name=Houses,proto3" json:"Houses,omitempty"`
}

func (m *UnqualifiedHouses) Reset()      { *m = UnqualifiedHouses{} }
func (*UnqualifiedHouses) ProtoMessage() {}
func (*UnqualifiedHouses) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{7}
}
func (m *UnqualifiedHouses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnqualifiedHouses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnqualifiedHouses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnqualifiedHouses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnqualifiedHouses.Merge(m, src)
}
func (m *UnqualifiedHouses) XXX_Size() int {
	return m.Size()
}
func (m *UnqualifiedHouses) XXX_DiscardUnknown() {
	xxx_messageInfo_UnqualifiedHouses.DiscardUnknown(m)
}

var xxx_messageInfo_UnqualifiedHouses proto.InternalMessageInfo

func (m *UnqualifiedHouses) GetHouses() []*ExaminationReject {
	if m != nil {
		return m.Houses
	}
	return nil
}

type UnqualifiedResides struct {
	Resides []*ExaminationReject `protobuf:"bytes,1,rep,name=Resides,proto3" json:"Resides,omitempty"`
}

func (m *UnqualifiedResides) Reset()      { *m = UnqualifiedResides{} }
func (*UnqualifiedResides) ProtoMessage() {}
func (*UnqualifiedResides) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{8}
}
func (m *UnqualifiedResides) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnqualifiedResides) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnqualifiedResides.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnqualifiedResides) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnqualifiedResides.Merge(m, src)
}
func (m *UnqualifiedResides) XXX_Size() int {
	return m.Size()
}
func (m *UnqualifiedResides) XXX_DiscardUnknown() {
	xxx_messageInfo_UnqualifiedResides.DiscardUnknown(m)
}

var xxx_messageInfo_UnqualifiedResides proto.InternalMessageInfo

func (m *UnqualifiedResides) GetResides() []*ExaminationReject {
	if m != nil {
		return m.Resides
	}
	return nil
}

type ExaminationList struct {
	HouseID []int32 `protobuf:"varint,1,rep,packed,name=HouseID,proto3" json:"HouseID,omitempty"`
}

func (m *ExaminationList) Reset()      { *m = ExaminationList{} }
func (*ExaminationList) ProtoMessage() {}
func (*ExaminationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_97897d009a2b2140, []int{9}
}
func (m *ExaminationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExaminationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExaminationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExaminationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExaminationList.Merge(m, src)
}
func (m *ExaminationList) XXX_Size() int {
	return m.Size()
}
func (m *ExaminationList) XXX_DiscardUnknown() {
	xxx_messageInfo_ExaminationList.DiscardUnknown(m)
}

var xxx_messageInfo_ExaminationList proto.InternalMessageInfo

func (m *ExaminationList) GetHouseID() []int32 {
	if m != nil {
		return m.HouseID
	}
	return nil
}

func init() {
	proto.RegisterType((*HouseMatchApprove)(nil), "manager.HouseMatchApprove")
	proto.RegisterType((*HouseCheckOut)(nil), "manager.HouseCheckOut")
	proto.RegisterType((*HouseMatchReject)(nil), "manager.HouseMatchReject")
	proto.RegisterType((*NewHouses)(nil), "manager.NewHouses")
	proto.RegisterType((*HouseMatchACK)(nil), "manager.HouseMatchACK")
	proto.RegisterType((*HouseCheckOutACK)(nil), "manager.HouseCheckOutACK")
	proto.RegisterType((*ExaminationReject)(nil), "manager.ExaminationReject")
	proto.RegisterType((*UnqualifiedHouses)(nil), "manager.UnqualifiedHouses")
	proto.RegisterType((*UnqualifiedResides)(nil), "manager.UnqualifiedResides")
	proto.RegisterType((*ExaminationList)(nil), "manager.ExaminationList")
}

func init() {
	proto.RegisterFile("Reactive-Welfare-Housing-System/src/messages/manager.proto", fileDescriptor_97897d009a2b2140)
}

var fileDescriptor_97897d009a2b2140 = []byte{
	// 523 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x8d, 0xe9, 0xba, 0x0d, 0x23, 0xb4, 0xd5, 0x42, 0x10, 0xf5, 0x60, 0x4d, 0x39, 0x0d, 0x41,
	0x1b, 0x69, 0xa0, 0x89, 0x7f, 0x42, 0xea, 0x3a, 0x18, 0x63, 0x1b, 0x48, 0x41, 0x08, 0xc1, 0xcd,
	0x4d, 0x7f, 0x4b, 0xcc, 0x9a, 0xb8, 0xd8, 0x4e, 0xa1, 0x37, 0x2e, 0xdc, 0xf9, 0x18, 0x7c, 0x14,
	0x8e, 0x3d, 0xee, 0x48, 0xd3, 0x0b, 0xc7, 0x7d, 0x04, 0x34, 0xc7, 0x29, 0x11, 0x13, 0x12, 0xe5,
	0xf6, 0xde, 0xcf, 0xef, 0xf7, 0xfa, 0xfc, 0x2a, 0x07, 0x3f, 0x08, 0x80, 0x85, 0x9a, 0x8f, 0xa0,
	0xf5, 0x06, 0x06, 0xc7, 0x4c, 0x42, 0xeb, 0x99, 0xc8, 0x14, 0x4f, 0xa3, 0xd6, 0xab, 0xb1, 0xd2,
	0x90, 0xf8, 0x4a, 0x86, 0x7e, 0x02, 0x4a, 0xb1, 0x08, 0x94, 0x9f, 0xb0, 0x94, 0x45, 0x20, 0xdb,
	0x43, 0x29, 0xb4, 0x20, 0x2b, 0x96, 0x36, 0xef, 0x45, 0x5c, 0xc7, 0x59, 0xaf, 0x1d, 0x8a, 0xc4,
	0xef, 0xc6, 0x4c, 0x9c, 0x64, 0x69, 0x37, 0x66, 0x69, 0xe4, 0x1b, 0x1d, 0x0b, 0xb5, 0x90, 0xad,
	0x48, 0xf8, 0x06, 0x14, 0x33, 0x55, 0x58, 0x34, 0x1f, 0x2f, 0xf4, 0xf3, 0x7d, 0xae, 0xb4, 0xe4,
	0xbd, 0x4c, 0x0b, 0x1b, 0xa1, 0x79, 0x7f, 0xa1, 0x7d, 0x15, 0x33, 0x09, 0x7d, 0xbb, 0xfa, 0x70,
	0xa1, 0xd5, 0xa1, 0x14, 0x43, 0x90, 0x7a, 0x5c, 0x2c, 0x7b, 0x3b, 0xb8, 0x71, 0xae, 0x86, 0x23,
	0xa6, 0xc3, 0xb8, 0x33, 0x1c, 0x4a, 0x31, 0x02, 0xd2, 0xc2, 0x75, 0xc3, 0x5d, 0xb4, 0x81, 0x36,
	0xaf, 0x6c, 0xdd, 0x68, 0x57, 0xf3, 0xfe, 0x96, 0x07, 0x85, 0xca, 0xdb, 0xc3, 0x57, 0xcd, 0xb0,
	0x1b, 0x43, 0x78, 0xf2, 0x32, 0xd3, 0x64, 0x1b, 0xaf, 0x96, 0xd8, 0x5a, 0x34, 0x2f, 0x5a, 0x94,
	0x8a, 0x60, 0xae, 0xf5, 0xde, 0xe2, 0xf5, 0x8a, 0x3b, 0xbc, 0x87, 0x50, 0x2f, 0x98, 0x85, 0x5c,
	0xc7, 0xcb, 0x01, 0x30, 0x25, 0x52, 0xf7, 0xd2, 0x06, 0xda, 0xac, 0x07, 0x96, 0x79, 0xdb, 0xf8,
	0xf2, 0x0b, 0xf8, 0x68, 0xf4, 0x8a, 0xdc, 0xc4, 0xcb, 0x05, 0xb2, 0xa6, 0x8d, 0xb6, 0x2d, 0x74,
	0x2e, 0x09, 0xac, 0xc0, 0x5b, 0xb3, 0x77, 0x2b, 0xfa, 0xe9, 0x1e, 0x78, 0xb7, 0x6d, 0xc6, 0x32,
	0x74, 0xa7, 0x7b, 0x40, 0x5c, 0xbc, 0x62, 0x66, 0xfb, 0xbb, 0xc6, 0xb0, 0x1e, 0x94, 0xd4, 0xfb,
	0x82, 0x70, 0xe3, 0xc9, 0x27, 0x96, 0xf0, 0x94, 0x69, 0x2e, 0x52, 0x7b, 0xa7, 0xbf, 0xea, 0xc9,
	0x3a, 0xae, 0x75, 0x22, 0xb0, 0xd9, 0xcf, 0x21, 0x21, 0x78, 0xa9, 0x23, 0x81, 0xb9, 0x35, 0x33,
	0x32, 0x98, 0x5c, 0xc3, 0xf5, 0x43, 0x18, 0xc1, 0xc0, 0x5d, 0x32, 0xc3, 0x82, 0x90, 0x26, 0x5e,
	0x7d, 0xca, 0x12, 0x3e, 0x18, 0xef, 0xef, 0xba, 0x75, 0x73, 0x30, 0xe7, 0xde, 0x1e, 0x6e, 0xbc,
	0x4e, 0x3f, 0x64, 0x6c, 0xc0, 0x8f, 0x39, 0xf4, 0x6d, 0x0d, 0x5b, 0x95, 0x1a, 0x6a, 0xe6, 0x4f,
	0x2a, 0x9f, 0xc5, 0x85, 0xc8, 0xf3, 0x3e, 0x9e, 0x63, 0x52, 0x31, 0x0a, 0x40, 0xf1, 0x3e, 0x28,
	0x72, 0x17, 0xaf, 0x58, 0xf8, 0x0f, 0x56, 0xa5, 0xd4, 0xbb, 0x85, 0xd7, 0x2a, 0xa7, 0x87, 0x5c,
	0xfd, 0xd1, 0x4c, 0xad, 0xd2, 0xcc, 0x8e, 0x9c, 0x4c, 0xa9, 0x73, 0x3a, 0xa5, 0xce, 0xd9, 0x94,
	0xa2, 0xcf, 0x39, 0x45, 0xdf, 0x72, 0x8a, 0xbe, 0xe7, 0x14, 0x4d, 0x72, 0x8a, 0x7e, 0xe4, 0x14,
	0xfd, 0xcc, 0xa9, 0x73, 0x96, 0x53, 0xf4, 0x75, 0x46, 0x9d, 0xc9, 0x8c, 0x3a, 0xa7, 0x33, 0xea,
	0xbc, 0x7b, 0xf4, 0x3f, 0x5f, 0x85, 0x23, 0xcb, 0x7b, 0xcb, 0xe6, 0x8d, 0xdc, 0xf9, 0x15, 0x00,
	0x00, 0xff, 0xff, 0xd1, 0x4b, 0x7f, 0xb7, 0x5c, 0x04, 0x00, 0x00,
}

func (this *HouseMatchApprove) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseMatchApprove)
	if !ok {
		that2, ok := that.(HouseMatchApprove)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Match.Equal(that1.Match) {
		return false
	}
	return true
}
func (this *HouseCheckOut) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseCheckOut)
	if !ok {
		that2, ok := that.(HouseCheckOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CheckOut.Equal(that1.CheckOut) {
		return false
	}
	return true
}
func (this *HouseMatchReject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseMatchReject)
	if !ok {
		that2, ok := that.(HouseMatchReject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Match.Equal(that1.Match) {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *NewHouses) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewHouses)
	if !ok {
		that2, ok := that.(NewHouses)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Houses.Equal(that1.Houses) {
		return false
	}
	return true
}
func (this *HouseMatchACK) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseMatchACK)
	if !ok {
		that2, ok := that.(HouseMatchACK)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HouseCheckOutACK) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseCheckOutACK)
	if !ok {
		that2, ok := that.(HouseCheckOutACK)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HouseID != that1.HouseID {
		return false
	}
	return true
}
func (this *ExaminationReject) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExaminationReject)
	if !ok {
		that2, ok := that.(ExaminationReject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HouseID != that1.HouseID {
		return false
	}
	if this.Age != that1.Age {
		return false
	}
	if this.Area != that1.Area {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.FamilyID != that1.FamilyID {
		return false
	}
	return true
}
func (this *UnqualifiedHouses) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnqualifiedHouses)
	if !ok {
		that2, ok := that.(UnqualifiedHouses)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Houses) != len(that1.Houses) {
		return false
	}
	for i := range this.Houses {
		if !this.Houses[i].Equal(that1.Houses[i]) {
			return false
		}
	}
	return true
}
func (this *UnqualifiedResides) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnqualifiedResides)
	if !ok {
		that2, ok := that.(UnqualifiedResides)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Resides) != len(that1.Resides) {
		return false
	}
	for i := range this.Resides {
		if !this.Resides[i].Equal(that1.Resides[i]) {
			return false
		}
	}
	return true
}
func (this *ExaminationList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExaminationList)
	if !ok {
		that2, ok := that.(ExaminationList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HouseID) != len(that1.HouseID) {
		return false
	}
	for i := range this.HouseID {
		if this.HouseID[i] != that1.HouseID[i] {
			return false
		}
	}
	return true
}
func (this *HouseMatchApprove) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&managerMessages.HouseMatchApprove{")
	if this.Match != nil {
		s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseCheckOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&managerMessages.HouseCheckOut{")
	if this.CheckOut != nil {
		s = append(s, "CheckOut: "+fmt.Sprintf("%#v", this.CheckOut)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseMatchReject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&managerMessages.HouseMatchReject{")
	if this.Match != nil {
		s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	}
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewHouses) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&managerMessages.NewHouses{")
	if this.Houses != nil {
		s = append(s, "Houses: "+fmt.Sprintf("%#v", this.Houses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseMatchACK) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&managerMessages.HouseMatchACK{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseCheckOutACK) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&managerMessages.HouseCheckOutACK{")
	s = append(s, "HouseID: "+fmt.Sprintf("%#v", this.HouseID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExaminationReject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&managerMessages.ExaminationReject{")
	s = append(s, "HouseID: "+fmt.Sprintf("%#v", this.HouseID)+",\n")
	s = append(s, "Age: "+fmt.Sprintf("%#v", this.Age)+",\n")
	s = append(s, "Area: "+fmt.Sprintf("%#v", this.Area)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "FamilyID: "+fmt.Sprintf("%#v", this.FamilyID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnqualifiedHouses) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&managerMessages.UnqualifiedHouses{")
	if this.Houses != nil {
		s = append(s, "Houses: "+fmt.Sprintf("%#v", this.Houses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnqualifiedResides) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&managerMessages.UnqualifiedResides{")
	if this.Resides != nil {
		s = append(s, "Resides: "+fmt.Sprintf("%#v", this.Resides)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExaminationList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&managerMessages.ExaminationList{")
	s = append(s, "HouseID: "+fmt.Sprintf("%#v", this.HouseID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringManager(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HouseMatchApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseMatchApprove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseMatchApprove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Match != nil {
		{
			size, err := m.Match.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HouseCheckOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseCheckOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseCheckOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckOut != nil {
		{
			size, err := m.CheckOut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HouseMatchReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseMatchReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseMatchReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x10
	}
	if m.Match != nil {
		{
			size, err := m.Match.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewHouses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewHouses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewHouses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Houses != nil {
		{
			size, err := m.Houses.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintManager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HouseMatchACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseMatchACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseMatchACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HouseCheckOutACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseCheckOutACK) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseCheckOutACK) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HouseID != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.HouseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExaminationReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExaminationReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExaminationReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FamilyID != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.FamilyID))
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if m.Area != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.Area))
		i--
		dAtA[i] = 0x18
	}
	if m.Age != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x10
	}
	if m.HouseID != 0 {
		i = encodeVarintManager(dAtA, i, uint64(m.HouseID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnqualifiedHouses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnqualifiedHouses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnqualifiedHouses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Houses) > 0 {
		for iNdEx := len(m.Houses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Houses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UnqualifiedResides) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnqualifiedResides) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnqualifiedResides) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resides) > 0 {
		for iNdEx := len(m.Resides) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resides[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExaminationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExaminationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExaminationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HouseID) > 0 {
		dAtA6 := make([]byte, len(m.HouseID)*10)
		var j5 int
		for _, num1 := range m.HouseID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintManager(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintManager(dAtA []byte, offset int, v uint64) int {
	offset -= sovManager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HouseMatchApprove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovManager(uint64(l))
	}
	return n
}

func (m *HouseCheckOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckOut != nil {
		l = m.CheckOut.Size()
		n += 1 + l + sovManager(uint64(l))
	}
	return n
}

func (m *HouseMatchReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovManager(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovManager(uint64(m.Reason))
	}
	return n
}

func (m *NewHouses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Houses != nil {
		l = m.Houses.Size()
		n += 1 + l + sovManager(uint64(l))
	}
	return n
}

func (m *HouseMatchACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HouseCheckOutACK) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HouseID != 0 {
		n += 1 + sovManager(uint64(m.HouseID))
	}
	return n
}

func (m *ExaminationReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HouseID != 0 {
		n += 1 + sovManager(uint64(m.HouseID))
	}
	if m.Age != 0 {
		n += 1 + sovManager(uint64(m.Age))
	}
	if m.Area != 0 {
		n += 1 + sovManager(uint64(m.Area))
	}
	if m.Level != 0 {
		n += 1 + sovManager(uint64(m.Level))
	}
	if m.FamilyID != 0 {
		n += 1 + sovManager(uint64(m.FamilyID))
	}
	return n
}

func (m *UnqualifiedHouses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Houses) > 0 {
		for _, e := range m.Houses {
			l = e.Size()
			n += 1 + l + sovManager(uint64(l))
		}
	}
	return n
}

func (m *UnqualifiedResides) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resides) > 0 {
		for _, e := range m.Resides {
			l = e.Size()
			n += 1 + l + sovManager(uint64(l))
		}
	}
	return n
}

func (m *ExaminationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HouseID) > 0 {
		l = 0
		for _, e := range m.HouseID {
			l += sovManager(uint64(e))
		}
		n += 1 + sovManager(uint64(l)) + l
	}
	return n
}

func sovManager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManager(x uint64) (n int) {
	return sovManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HouseMatchApprove) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseMatchApprove{`,
		`Match:` + strings.Replace(fmt.Sprintf("%v", this.Match), "HouseMatch", "distributorMessages.HouseMatch", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HouseCheckOut) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseCheckOut{`,
		`CheckOut:` + strings.Replace(fmt.Sprintf("%v", this.CheckOut), "HouseCheckOut", "distributorMessages.HouseCheckOut", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HouseMatchReject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseMatchReject{`,
		`Match:` + strings.Replace(fmt.Sprintf("%v", this.Match), "HouseMatch", "distributorMessages.HouseMatch", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewHouses) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewHouses{`,
		`Houses:` + strings.Replace(fmt.Sprintf("%v", this.Houses), "NewHouses", "sharedMessages.NewHouses", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HouseMatchACK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseMatchACK{`,
		`}`,
	}, "")
	return s
}
func (this *HouseCheckOutACK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseCheckOutACK{`,
		`HouseID:` + fmt.Sprintf("%v", this.HouseID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExaminationReject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExaminationReject{`,
		`HouseID:` + fmt.Sprintf("%v", this.HouseID) + `,`,
		`Age:` + fmt.Sprintf("%v", this.Age) + `,`,
		`Area:` + fmt.Sprintf("%v", this.Area) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`FamilyID:` + fmt.Sprintf("%v", this.FamilyID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnqualifiedHouses) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHouses := "[]*ExaminationReject{"
	for _, f := range this.Houses {
		repeatedStringForHouses += strings.Replace(f.String(), "ExaminationReject", "ExaminationReject", 1) + ","
	}
	repeatedStringForHouses += "}"
	s := strings.Join([]string{`&UnqualifiedHouses{`,
		`Houses:` + repeatedStringForHouses + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnqualifiedResides) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResides := "[]*ExaminationReject{"
	for _, f := range this.Resides {
		repeatedStringForResides += strings.Replace(f.String(), "ExaminationReject", "ExaminationReject", 1) + ","
	}
	repeatedStringForResides += "}"
	s := strings.Join([]string{`&UnqualifiedResides{`,
		`Resides:` + repeatedStringForResides + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExaminationList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExaminationList{`,
		`HouseID:` + fmt.Sprintf("%v", this.HouseID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringManager(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HouseMatchApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseMatchApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseMatchApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &distributorMessages.HouseMatch{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseCheckOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseCheckOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseCheckOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckOut == nil {
				m.CheckOut = &distributorMessages.HouseCheckOut{}
			}
			if err := m.CheckOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseMatchReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseMatchReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseMatchReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Match == nil {
				m.Match = &distributorMessages.HouseMatch{}
			}
			if err := m.Match.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewHouses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewHouses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewHouses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Houses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Houses == nil {
				m.Houses = &sharedMessages.NewHouses{}
			}
			if err := m.Houses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseMatchACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseMatchACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseMatchACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseCheckOutACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseCheckOutACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseCheckOutACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseID", wireType)
			}
			m.HouseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HouseID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExaminationReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExaminationReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExaminationReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseID", wireType)
			}
			m.HouseID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HouseID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyID", wireType)
			}
			m.FamilyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnqualifiedHouses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnqualifiedHouses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnqualifiedHouses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Houses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Houses = append(m.Houses, &ExaminationReject{})
			if err := m.Houses[len(m.Houses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnqualifiedResides) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnqualifiedResides: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnqualifiedResides: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resides", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resides = append(m.Resides, &ExaminationReject{})
			if err := m.Resides[len(m.Resides)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExaminationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExaminationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExaminationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HouseID = append(m.HouseID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManager
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManager
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.HouseID) == 0 {
					m.HouseID = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HouseID = append(m.HouseID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManager = fmt.Errorf("proto: unexpected end of group")
)
