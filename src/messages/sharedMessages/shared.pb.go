// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Reactive-Welfare-Housing-System/src/messages/shared.proto

package sharedMessages

import (
	fmt "fmt"
	actor "github.com/ChaokunChang/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NewHouses struct {
	Houses []*NewHouse `protobuf:"bytes,1,rep,name=Houses,proto3" json:"Houses,omitempty"`
}

func (m *NewHouses) Reset()      { *m = NewHouses{} }
func (*NewHouses) ProtoMessage() {}
func (*NewHouses) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{0}
}
func (m *NewHouses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewHouses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewHouses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewHouses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewHouses.Merge(m, src)
}
func (m *NewHouses) XXX_Size() int {
	return m.Size()
}
func (m *NewHouses) XXX_DiscardUnknown() {
	xxx_messageInfo_NewHouses.DiscardUnknown(m)
}

var xxx_messageInfo_NewHouses proto.InternalMessageInfo

func (m *NewHouses) GetHouses() []*NewHouse {
	if m != nil {
		return m.Houses
	}
	return nil
}

type NewHouse struct {
	ID    int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Level int32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	Age   int32 `protobuf:"varint,3,opt,name=Age,proto3" json:"Age,omitempty"`
	Area  int32 `protobuf:"varint,4,opt,name=Area,proto3" json:"Area,omitempty"`
}

func (m *NewHouse) Reset()      { *m = NewHouse{} }
func (*NewHouse) ProtoMessage() {}
func (*NewHouse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{1}
}
func (m *NewHouse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewHouse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewHouse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewHouse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewHouse.Merge(m, src)
}
func (m *NewHouse) XXX_Size() int {
	return m.Size()
}
func (m *NewHouse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewHouse.DiscardUnknown(m)
}

var xxx_messageInfo_NewHouse proto.InternalMessageInfo

func (m *NewHouse) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *NewHouse) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *NewHouse) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *NewHouse) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type ManagerConnect struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
}

func (m *ManagerConnect) Reset()      { *m = ManagerConnect{} }
func (*ManagerConnect) ProtoMessage() {}
func (*ManagerConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{2}
}
func (m *ManagerConnect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManagerConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManagerConnect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManagerConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerConnect.Merge(m, src)
}
func (m *ManagerConnect) XXX_Size() int {
	return m.Size()
}
func (m *ManagerConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerConnect.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerConnect proto.InternalMessageInfo

func (m *ManagerConnect) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type DistributorConnect struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
}

func (m *DistributorConnect) Reset()      { *m = DistributorConnect{} }
func (*DistributorConnect) ProtoMessage() {}
func (*DistributorConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{3}
}
func (m *DistributorConnect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributorConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributorConnect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributorConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributorConnect.Merge(m, src)
}
func (m *DistributorConnect) XXX_Size() int {
	return m.Size()
}
func (m *DistributorConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributorConnect.DiscardUnknown(m)
}

var xxx_messageInfo_DistributorConnect proto.InternalMessageInfo

func (m *DistributorConnect) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type ExaminationList struct {
	HouseID []int32 `protobuf:"varint,1,rep,packed,name=HouseID,proto3" json:"HouseID,omitempty"`
}

func (m *ExaminationList) Reset()      { *m = ExaminationList{} }
func (*ExaminationList) ProtoMessage() {}
func (*ExaminationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{4}
}
func (m *ExaminationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExaminationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExaminationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExaminationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExaminationList.Merge(m, src)
}
func (m *ExaminationList) XXX_Size() int {
	return m.Size()
}
func (m *ExaminationList) XXX_DiscardUnknown() {
	xxx_messageInfo_ExaminationList.DiscardUnknown(m)
}

var xxx_messageInfo_ExaminationList proto.InternalMessageInfo

func (m *ExaminationList) GetHouseID() []int32 {
	if m != nil {
		return m.HouseID
	}
	return nil
}

type VerifierConnect struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
}

func (m *VerifierConnect) Reset()      { *m = VerifierConnect{} }
func (*VerifierConnect) ProtoMessage() {}
func (*VerifierConnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{5}
}
func (m *VerifierConnect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifierConnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifierConnect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifierConnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifierConnect.Merge(m, src)
}
func (m *VerifierConnect) XXX_Size() int {
	return m.Size()
}
func (m *VerifierConnect) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifierConnect.DiscardUnknown(m)
}

var xxx_messageInfo_VerifierConnect proto.InternalMessageInfo

func (m *VerifierConnect) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

type NewRequests struct {
	Requests []*NewRequest `protobuf:"bytes,1,rep,name=Requests,proto3" json:"Requests,omitempty"`
}

func (m *NewRequests) Reset()      { *m = NewRequests{} }
func (*NewRequests) ProtoMessage() {}
func (*NewRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{6}
}
func (m *NewRequests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewRequests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRequests.Merge(m, src)
}
func (m *NewRequests) XXX_Size() int {
	return m.Size()
}
func (m *NewRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRequests.DiscardUnknown(m)
}

var xxx_messageInfo_NewRequests proto.InternalMessageInfo

func (m *NewRequests) GetRequests() []*NewRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type NewRequest struct {
	FamilyID int32 `protobuf:"varint,1,opt,name=FamilyID,proto3" json:"FamilyID,omitempty"`
	Level    int32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (m *NewRequest) Reset()      { *m = NewRequest{} }
func (*NewRequest) ProtoMessage() {}
func (*NewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{7}
}
func (m *NewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRequest.Merge(m, src)
}
func (m *NewRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewRequest proto.InternalMessageInfo

func (m *NewRequest) GetFamilyID() int32 {
	if m != nil {
		return m.FamilyID
	}
	return 0
}

func (m *NewRequest) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type NewCheckOuts struct {
	CheckOuts []*NewCheckOut `protobuf:"bytes,1,rep,name=CheckOuts,proto3" json:"CheckOuts,omitempty"`
}

func (m *NewCheckOuts) Reset()      { *m = NewCheckOuts{} }
func (*NewCheckOuts) ProtoMessage() {}
func (*NewCheckOuts) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{8}
}
func (m *NewCheckOuts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCheckOuts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCheckOuts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCheckOuts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCheckOuts.Merge(m, src)
}
func (m *NewCheckOuts) XXX_Size() int {
	return m.Size()
}
func (m *NewCheckOuts) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCheckOuts.DiscardUnknown(m)
}

var xxx_messageInfo_NewCheckOuts proto.InternalMessageInfo

func (m *NewCheckOuts) GetCheckOuts() []*NewCheckOut {
	if m != nil {
		return m.CheckOuts
	}
	return nil
}

type NewCheckOut struct {
	FamilyID int32 `protobuf:"varint,1,opt,name=FamilyID,proto3" json:"FamilyID,omitempty"`
	Level    int32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (m *NewCheckOut) Reset()      { *m = NewCheckOut{} }
func (*NewCheckOut) ProtoMessage() {}
func (*NewCheckOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_e777b6ecd2dce629, []int{9}
}
func (m *NewCheckOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCheckOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCheckOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCheckOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCheckOut.Merge(m, src)
}
func (m *NewCheckOut) XXX_Size() int {
	return m.Size()
}
func (m *NewCheckOut) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCheckOut.DiscardUnknown(m)
}

var xxx_messageInfo_NewCheckOut proto.InternalMessageInfo

func (m *NewCheckOut) GetFamilyID() int32 {
	if m != nil {
		return m.FamilyID
	}
	return 0
}

func (m *NewCheckOut) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func init() {
	proto.RegisterType((*NewHouses)(nil), "shared.NewHouses")
	proto.RegisterType((*NewHouse)(nil), "shared.NewHouse")
	proto.RegisterType((*ManagerConnect)(nil), "shared.ManagerConnect")
	proto.RegisterType((*DistributorConnect)(nil), "shared.DistributorConnect")
	proto.RegisterType((*ExaminationList)(nil), "shared.ExaminationList")
	proto.RegisterType((*VerifierConnect)(nil), "shared.VerifierConnect")
	proto.RegisterType((*NewRequests)(nil), "shared.NewRequests")
	proto.RegisterType((*NewRequest)(nil), "shared.NewRequest")
	proto.RegisterType((*NewCheckOuts)(nil), "shared.NewCheckOuts")
	proto.RegisterType((*NewCheckOut)(nil), "shared.NewCheckOut")
}

func init() {
	proto.RegisterFile("Reactive-Welfare-Housing-System/src/messages/shared.proto", fileDescriptor_e777b6ecd2dce629)
}

var fileDescriptor_e777b6ecd2dce629 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x14, 0xf4, 0x36, 0x4d, 0x48, 0x5f, 0x50, 0x5b, 0x2d, 0x1c, 0xac, 0x1e, 0x56, 0x95, 0x4f, 0x91,
	0x50, 0x6c, 0x51, 0xa8, 0x54, 0x84, 0x00, 0x85, 0x04, 0x44, 0xa4, 0x36, 0x20, 0x57, 0x2a, 0x12,
	0xb7, 0x8d, 0xfb, 0xea, 0xac, 0x1a, 0x7b, 0xe9, 0xee, 0xba, 0xa1, 0x37, 0x3e, 0x81, 0xcf, 0xe0,
	0x53, 0x38, 0xe6, 0xd8, 0x23, 0x71, 0x2e, 0x1c, 0xfb, 0x09, 0xa8, 0x6b, 0x3b, 0xed, 0x81, 0x4b,
	0xb8, 0xcd, 0xcc, 0x7b, 0xf6, 0x9b, 0x19, 0xd9, 0xf0, 0x22, 0x44, 0x1e, 0x19, 0x71, 0x89, 0x9d,
	0xcf, 0x38, 0x39, 0xe3, 0x0a, 0x3b, 0x1f, 0x64, 0xa6, 0x45, 0x1a, 0x77, 0x8e, 0xaf, 0xb4, 0xc1,
	0x24, 0xd0, 0x2a, 0x0a, 0x12, 0xd4, 0x9a, 0xc7, 0xa8, 0x03, 0x3d, 0xe6, 0x0a, 0x4f, 0xfd, 0xaf,
	0x4a, 0x1a, 0x49, 0x1b, 0x05, 0xdb, 0x39, 0x88, 0x85, 0x19, 0x67, 0x23, 0x3f, 0x92, 0x49, 0xd0,
	0x1b, 0x73, 0x79, 0x9e, 0xa5, 0xbd, 0x31, 0x4f, 0xe3, 0xc0, 0xae, 0xf1, 0xc8, 0x48, 0xd5, 0x89,
	0x65, 0x60, 0x41, 0xa1, 0xe9, 0xe2, 0x0d, 0xde, 0x3e, 0x6c, 0x0c, 0x71, 0x7a, 0x7b, 0x10, 0x35,
	0x6d, 0x43, 0xa3, 0x40, 0x2e, 0xd9, 0xad, 0xb5, 0x5b, 0x7b, 0xdb, 0x7e, 0x79, 0xad, 0x5a, 0x09,
	0xcb, 0xb9, 0x77, 0x02, 0xcd, 0x4a, 0xa3, 0x9b, 0xb0, 0x36, 0xe8, 0xbb, 0x64, 0x97, 0xb4, 0xeb,
	0xe1, 0xda, 0xa0, 0x4f, 0x1f, 0x43, 0xfd, 0x10, 0x2f, 0x71, 0xe2, 0xae, 0x59, 0xa9, 0x20, 0x74,
	0x1b, 0x6a, 0xdd, 0x18, 0xdd, 0x9a, 0xd5, 0x6e, 0x21, 0xa5, 0xb0, 0xde, 0x55, 0xc8, 0xdd, 0x75,
	0x2b, 0x59, 0xec, 0x3d, 0x87, 0xcd, 0x23, 0x9e, 0xf2, 0x18, 0x55, 0x4f, 0xa6, 0x29, 0x46, 0x86,
	0x7a, 0xd0, 0x38, 0xc6, 0xf4, 0x14, 0x95, 0xbd, 0xd0, 0xda, 0x03, 0xdf, 0xa6, 0xf0, 0x3f, 0x0d,
	0xfa, 0x61, 0x39, 0xf1, 0x0e, 0x80, 0xf6, 0x85, 0x36, 0x4a, 0x8c, 0x32, 0x23, 0x57, 0x7a, 0xf2,
	0x09, 0x6c, 0xbd, 0xfb, 0xc6, 0x13, 0x91, 0x72, 0x23, 0x64, 0x7a, 0x28, 0xb4, 0xa1, 0x2e, 0x3c,
	0xb0, 0xb9, 0x6c, 0xa6, 0x5a, 0xbb, 0x1e, 0x56, 0xd4, 0xdb, 0x87, 0xad, 0x13, 0x54, 0xe2, 0x4c,
	0xac, 0xe6, 0xee, 0x15, 0xb4, 0x86, 0x38, 0x0d, 0xf1, 0x22, 0x43, 0x6d, 0x34, 0xf5, 0xa1, 0x59,
	0xe1, 0xb2, 0x66, 0x7a, 0xaf, 0xe6, 0x72, 0x14, 0x2e, 0x77, 0xbc, 0xd7, 0x00, 0x77, 0x3a, 0xdd,
	0x81, 0xe6, 0x7b, 0x9e, 0x88, 0xc9, 0xd5, 0xb2, 0xf2, 0x25, 0xff, 0x77, 0xf1, 0x5e, 0x17, 0x1e,
	0x0e, 0x71, 0xda, 0x1b, 0x63, 0x74, 0xfe, 0x31, 0x33, 0x9a, 0x3e, 0x85, 0x8d, 0x25, 0x29, 0x0d,
	0x3c, 0xba, 0x67, 0xa0, 0x9a, 0x85, 0x77, 0x5b, 0xde, 0x1b, 0x9b, 0xa0, 0xe2, 0xab, 0x7b, 0x78,
	0x7b, 0x31, 0x9b, 0x33, 0xe7, 0x7a, 0xce, 0x9c, 0x9b, 0x39, 0x23, 0xdf, 0x73, 0x46, 0x7e, 0xe6,
	0x8c, 0xfc, 0xca, 0x19, 0x99, 0xe5, 0x8c, 0xfc, 0xce, 0x19, 0xf9, 0x93, 0x33, 0xe7, 0x26, 0x67,
	0xe4, 0xc7, 0x82, 0x39, 0xb3, 0x05, 0x73, 0xae, 0x17, 0xcc, 0xf9, 0xf2, 0xf2, 0x3f, 0x7e, 0x8c,
	0xa3, 0x92, 0x8e, 0x1a, 0xf6, 0xfb, 0x7e, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x42, 0x9d,
	0x66, 0x5e, 0x03, 0x00, 0x00,
}

func (this *NewHouses) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewHouses)
	if !ok {
		that2, ok := that.(NewHouses)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Houses) != len(that1.Houses) {
		return false
	}
	for i := range this.Houses {
		if !this.Houses[i].Equal(that1.Houses[i]) {
			return false
		}
	}
	return true
}
func (this *NewHouse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewHouse)
	if !ok {
		that2, ok := that.(NewHouse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if this.Age != that1.Age {
		return false
	}
	if this.Area != that1.Area {
		return false
	}
	return true
}
func (this *ManagerConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ManagerConnect)
	if !ok {
		that2, ok := that.(ManagerConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *DistributorConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DistributorConnect)
	if !ok {
		that2, ok := that.(DistributorConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *ExaminationList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExaminationList)
	if !ok {
		that2, ok := that.(ExaminationList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HouseID) != len(that1.HouseID) {
		return false
	}
	for i := range this.HouseID {
		if this.HouseID[i] != that1.HouseID[i] {
			return false
		}
	}
	return true
}
func (this *VerifierConnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerifierConnect)
	if !ok {
		that2, ok := that.(VerifierConnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	return true
}
func (this *NewRequests) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewRequests)
	if !ok {
		that2, ok := that.(NewRequests)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Requests) != len(that1.Requests) {
		return false
	}
	for i := range this.Requests {
		if !this.Requests[i].Equal(that1.Requests[i]) {
			return false
		}
	}
	return true
}
func (this *NewRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewRequest)
	if !ok {
		that2, ok := that.(NewRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FamilyID != that1.FamilyID {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *NewCheckOuts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCheckOuts)
	if !ok {
		that2, ok := that.(NewCheckOuts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CheckOuts) != len(that1.CheckOuts) {
		return false
	}
	for i := range this.CheckOuts {
		if !this.CheckOuts[i].Equal(that1.CheckOuts[i]) {
			return false
		}
	}
	return true
}
func (this *NewCheckOut) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NewCheckOut)
	if !ok {
		that2, ok := that.(NewCheckOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FamilyID != that1.FamilyID {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *NewHouses) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sharedMessages.NewHouses{")
	if this.Houses != nil {
		s = append(s, "Houses: "+fmt.Sprintf("%#v", this.Houses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewHouse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&sharedMessages.NewHouse{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Age: "+fmt.Sprintf("%#v", this.Age)+",\n")
	s = append(s, "Area: "+fmt.Sprintf("%#v", this.Area)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ManagerConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sharedMessages.ManagerConnect{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DistributorConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sharedMessages.DistributorConnect{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExaminationList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sharedMessages.ExaminationList{")
	s = append(s, "HouseID: "+fmt.Sprintf("%#v", this.HouseID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifierConnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sharedMessages.VerifierConnect{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewRequests) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sharedMessages.NewRequests{")
	if this.Requests != nil {
		s = append(s, "Requests: "+fmt.Sprintf("%#v", this.Requests)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sharedMessages.NewRequest{")
	s = append(s, "FamilyID: "+fmt.Sprintf("%#v", this.FamilyID)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewCheckOuts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&sharedMessages.NewCheckOuts{")
	if this.CheckOuts != nil {
		s = append(s, "CheckOuts: "+fmt.Sprintf("%#v", this.CheckOuts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NewCheckOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sharedMessages.NewCheckOut{")
	s = append(s, "FamilyID: "+fmt.Sprintf("%#v", this.FamilyID)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringShared(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *NewHouses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewHouses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewHouses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Houses) > 0 {
		for iNdEx := len(m.Houses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Houses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShared(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewHouse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewHouse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewHouse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Area != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Area))
		i--
		dAtA[i] = 0x20
	}
	if m.Age != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManagerConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManagerConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManagerConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DistributorConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributorConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributorConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExaminationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExaminationList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExaminationList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HouseID) > 0 {
		dAtA4 := make([]byte, len(m.HouseID)*10)
		var j3 int
		for _, num1 := range m.HouseID {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintShared(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifierConnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifierConnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifierConnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintShared(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRequests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewRequests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShared(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.FamilyID != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.FamilyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewCheckOuts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCheckOuts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCheckOuts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CheckOuts) > 0 {
		for iNdEx := len(m.CheckOuts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckOuts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintShared(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NewCheckOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCheckOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewCheckOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.FamilyID != 0 {
		i = encodeVarintShared(dAtA, i, uint64(m.FamilyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintShared(dAtA []byte, offset int, v uint64) int {
	offset -= sovShared(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NewHouses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Houses) > 0 {
		for _, e := range m.Houses {
			l = e.Size()
			n += 1 + l + sovShared(uint64(l))
		}
	}
	return n
}

func (m *NewHouse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovShared(uint64(m.ID))
	}
	if m.Level != 0 {
		n += 1 + sovShared(uint64(m.Level))
	}
	if m.Age != 0 {
		n += 1 + sovShared(uint64(m.Age))
	}
	if m.Area != 0 {
		n += 1 + sovShared(uint64(m.Area))
	}
	return n
}

func (m *ManagerConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	return n
}

func (m *DistributorConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	return n
}

func (m *ExaminationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HouseID) > 0 {
		l = 0
		for _, e := range m.HouseID {
			l += sovShared(uint64(e))
		}
		n += 1 + sovShared(uint64(l)) + l
	}
	return n
}

func (m *VerifierConnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovShared(uint64(l))
	}
	return n
}

func (m *NewRequests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovShared(uint64(l))
		}
	}
	return n
}

func (m *NewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FamilyID != 0 {
		n += 1 + sovShared(uint64(m.FamilyID))
	}
	if m.Level != 0 {
		n += 1 + sovShared(uint64(m.Level))
	}
	return n
}

func (m *NewCheckOuts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CheckOuts) > 0 {
		for _, e := range m.CheckOuts {
			l = e.Size()
			n += 1 + l + sovShared(uint64(l))
		}
	}
	return n
}

func (m *NewCheckOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FamilyID != 0 {
		n += 1 + sovShared(uint64(m.FamilyID))
	}
	if m.Level != 0 {
		n += 1 + sovShared(uint64(m.Level))
	}
	return n
}

func sovShared(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozShared(x uint64) (n int) {
	return sovShared(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NewHouses) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHouses := "[]*NewHouse{"
	for _, f := range this.Houses {
		repeatedStringForHouses += strings.Replace(f.String(), "NewHouse", "NewHouse", 1) + ","
	}
	repeatedStringForHouses += "}"
	s := strings.Join([]string{`&NewHouses{`,
		`Houses:` + repeatedStringForHouses + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewHouse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewHouse{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Age:` + fmt.Sprintf("%v", this.Age) + `,`,
		`Area:` + fmt.Sprintf("%v", this.Area) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ManagerConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ManagerConnect{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DistributorConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DistributorConnect{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExaminationList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExaminationList{`,
		`HouseID:` + fmt.Sprintf("%v", this.HouseID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifierConnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifierConnect{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewRequests) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRequests := "[]*NewRequest{"
	for _, f := range this.Requests {
		repeatedStringForRequests += strings.Replace(f.String(), "NewRequest", "NewRequest", 1) + ","
	}
	repeatedStringForRequests += "}"
	s := strings.Join([]string{`&NewRequests{`,
		`Requests:` + repeatedStringForRequests + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewRequest{`,
		`FamilyID:` + fmt.Sprintf("%v", this.FamilyID) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewCheckOuts) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCheckOuts := "[]*NewCheckOut{"
	for _, f := range this.CheckOuts {
		repeatedStringForCheckOuts += strings.Replace(f.String(), "NewCheckOut", "NewCheckOut", 1) + ","
	}
	repeatedStringForCheckOuts += "}"
	s := strings.Join([]string{`&NewCheckOuts{`,
		`CheckOuts:` + repeatedStringForCheckOuts + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewCheckOut) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewCheckOut{`,
		`FamilyID:` + fmt.Sprintf("%v", this.FamilyID) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringShared(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NewHouses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewHouses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewHouses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Houses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Houses = append(m.Houses, &NewHouse{})
			if err := m.Houses[len(m.Houses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewHouse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewHouse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewHouse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManagerConnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManagerConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManagerConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributorConnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributorConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributorConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExaminationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExaminationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExaminationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShared
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HouseID = append(m.HouseID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShared
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShared
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthShared
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.HouseID) == 0 {
					m.HouseID = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShared
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HouseID = append(m.HouseID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HouseID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifierConnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifierConnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifierConnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &NewRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyID", wireType)
			}
			m.FamilyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCheckOuts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCheckOuts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCheckOuts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckOuts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShared
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthShared
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckOuts = append(m.CheckOuts, &NewCheckOut{})
			if err := m.CheckOuts[len(m.CheckOuts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCheckOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShared
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCheckOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCheckOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FamilyID", wireType)
			}
			m.FamilyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FamilyID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShared
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShared(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthShared
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShared(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShared
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShared
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthShared
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupShared
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthShared
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthShared        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShared          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupShared = fmt.Errorf("proto: unexpected end of group")
)
