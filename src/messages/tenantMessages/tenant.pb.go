// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Reactive-Welfare-Housing-System/src/messages/tenant.proto

package tenantMessages

import (
	fmt "fmt"
	_ "github.com/ChaokunChang/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HouseApplicationRequest struct {
	UserId   int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (m *HouseApplicationRequest) Reset()      { *m = HouseApplicationRequest{} }
func (*HouseApplicationRequest) ProtoMessage() {}
func (*HouseApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc6ea5982061c7c, []int{0}
}
func (m *HouseApplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseApplicationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseApplicationRequest.Merge(m, src)
}
func (m *HouseApplicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *HouseApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HouseApplicationRequest proto.InternalMessageInfo

func (m *HouseApplicationRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *HouseApplicationRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type HouseApplicationResponse struct {
}

func (m *HouseApplicationResponse) Reset()      { *m = HouseApplicationResponse{} }
func (*HouseApplicationResponse) ProtoMessage() {}
func (*HouseApplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc6ea5982061c7c, []int{1}
}
func (m *HouseApplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseApplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseApplicationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseApplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseApplicationResponse.Merge(m, src)
}
func (m *HouseApplicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *HouseApplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseApplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HouseApplicationResponse proto.InternalMessageInfo

type HouseReplacementRequest struct {
	UserId   int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (m *HouseReplacementRequest) Reset()      { *m = HouseReplacementRequest{} }
func (*HouseReplacementRequest) ProtoMessage() {}
func (*HouseReplacementRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc6ea5982061c7c, []int{2}
}
func (m *HouseReplacementRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseReplacementRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseReplacementRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseReplacementRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseReplacementRequest.Merge(m, src)
}
func (m *HouseReplacementRequest) XXX_Size() int {
	return m.Size()
}
func (m *HouseReplacementRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseReplacementRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HouseReplacementRequest proto.InternalMessageInfo

func (m *HouseReplacementRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *HouseReplacementRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type HouseReplacementResponse struct {
}

func (m *HouseReplacementResponse) Reset()      { *m = HouseReplacementResponse{} }
func (*HouseReplacementResponse) ProtoMessage() {}
func (*HouseReplacementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc6ea5982061c7c, []int{3}
}
func (m *HouseReplacementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseReplacementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseReplacementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseReplacementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseReplacementResponse.Merge(m, src)
}
func (m *HouseReplacementResponse) XXX_Size() int {
	return m.Size()
}
func (m *HouseReplacementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseReplacementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HouseReplacementResponse proto.InternalMessageInfo

type HouseReturnRequest struct {
	UserId   int32  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	UserName string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
}

func (m *HouseReturnRequest) Reset()      { *m = HouseReturnRequest{} }
func (*HouseReturnRequest) ProtoMessage() {}
func (*HouseReturnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc6ea5982061c7c, []int{4}
}
func (m *HouseReturnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseReturnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseReturnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseReturnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseReturnRequest.Merge(m, src)
}
func (m *HouseReturnRequest) XXX_Size() int {
	return m.Size()
}
func (m *HouseReturnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseReturnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HouseReturnRequest proto.InternalMessageInfo

func (m *HouseReturnRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *HouseReturnRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type HouseReturnResponse struct {
}

func (m *HouseReturnResponse) Reset()      { *m = HouseReturnResponse{} }
func (*HouseReturnResponse) ProtoMessage() {}
func (*HouseReturnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc6ea5982061c7c, []int{5}
}
func (m *HouseReturnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HouseReturnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HouseReturnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HouseReturnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HouseReturnResponse.Merge(m, src)
}
func (m *HouseReturnResponse) XXX_Size() int {
	return m.Size()
}
func (m *HouseReturnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HouseReturnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HouseReturnResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HouseApplicationRequest)(nil), "tenant.HouseApplicationRequest")
	proto.RegisterType((*HouseApplicationResponse)(nil), "tenant.HouseApplicationResponse")
	proto.RegisterType((*HouseReplacementRequest)(nil), "tenant.HouseReplacementRequest")
	proto.RegisterType((*HouseReplacementResponse)(nil), "tenant.HouseReplacementResponse")
	proto.RegisterType((*HouseReturnRequest)(nil), "tenant.HouseReturnRequest")
	proto.RegisterType((*HouseReturnResponse)(nil), "tenant.HouseReturnResponse")
}

func init() {
	proto.RegisterFile("Reactive-Welfare-Housing-System/src/messages/tenant.proto", fileDescriptor_0cc6ea5982061c7c)
}

var fileDescriptor_0cc6ea5982061c7c = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x40, 0x6d, 0x24, 0x2a, 0xf0, 0x18, 0x04, 0x54, 0x1d, 0xbe, 0xaa, 0x4e, 0x5d, 0x52, 0x0f,
	0x2c, 0x20, 0x26, 0xe8, 0x52, 0x86, 0x32, 0x04, 0x21, 0x24, 0x36, 0xd7, 0x7c, 0xd2, 0x88, 0xc6,
	0x4e, 0x6d, 0x07, 0x89, 0x8d, 0x23, 0x70, 0x0c, 0x8e, 0xc2, 0xd8, 0xb1, 0x23, 0x71, 0x16, 0xc6,
	0x1e, 0x01, 0x35, 0x89, 0x2a, 0x55, 0x6c, 0xc0, 0xf6, 0x9f, 0x6d, 0xbd, 0x27, 0xeb, 0xb3, 0xb3,
	0x08, 0x85, 0x74, 0xc9, 0x33, 0x86, 0x77, 0x38, 0x7b, 0x14, 0x06, 0xc3, 0x91, 0xce, 0x6d, 0xa2,
	0xe2, 0xf0, 0xe6, 0xc5, 0x3a, 0x4c, 0xb9, 0x35, 0x92, 0xa7, 0x68, 0xad, 0x88, 0xd1, 0x72, 0x87,
	0x4a, 0x28, 0x37, 0xc8, 0x8c, 0x76, 0x3a, 0x68, 0xd5, 0xd4, 0x39, 0x8d, 0x13, 0x37, 0xcd, 0x27,
	0x03, 0xa9, 0x53, 0x3e, 0x9c, 0x0a, 0xfd, 0x94, 0xab, 0xe1, 0x54, 0xa8, 0x98, 0x57, 0xcf, 0x84,
	0x74, 0xda, 0x84, 0xb1, 0xe6, 0xd5, 0x50, 0x9f, 0xd9, 0xda, 0xd0, 0x1b, 0xb3, 0xe3, 0x75, 0x0d,
	0x2f, 0xb2, 0x6c, 0x96, 0x48, 0xe1, 0x12, 0xad, 0x22, 0x9c, 0xe7, 0x68, 0x5d, 0x70, 0xc4, 0x5a,
	0xb7, 0x16, 0xcd, 0xd5, 0x43, 0x9b, 0x76, 0x69, 0x7f, 0x37, 0x6a, 0x28, 0xe8, 0xb0, 0xbd, 0xf5,
	0x74, 0x2d, 0x52, 0x6c, 0xef, 0x74, 0x69, 0x7f, 0x3f, 0xda, 0x70, 0xaf, 0xc3, 0xda, 0x3f, 0x75,
	0x36, 0xd3, 0xca, 0xe2, 0x26, 0x15, 0x61, 0x36, 0x13, 0x12, 0x53, 0x54, 0xee, 0x3f, 0x52, 0x5b,
	0xba, 0x26, 0x35, 0x62, 0x41, 0x73, 0xe7, 0x72, 0xf3, 0xa7, 0x0f, 0x1d, 0xb2, 0x83, 0x2d, 0x53,
	0x1d, 0xb8, 0x9c, 0x2f, 0x0a, 0x20, 0xcb, 0x02, 0xc8, 0xaa, 0x00, 0xfa, 0xea, 0x81, 0xbe, 0x7b,
	0xa0, 0x1f, 0x1e, 0xe8, 0xc2, 0x03, 0xfd, 0xf4, 0x40, 0xbf, 0x3c, 0x90, 0x95, 0x07, 0xfa, 0x56,
	0x02, 0x59, 0x94, 0x40, 0x96, 0x25, 0x90, 0xfb, 0xf3, 0x5f, 0x6c, 0x7a, 0xdc, 0xe0, 0xa4, 0x55,
	0x2d, 0xec, 0xe4, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x2d, 0x43, 0x6a, 0x2f, 0x02, 0x00, 0x00,
}

func (this *HouseApplicationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseApplicationRequest)
	if !ok {
		that2, ok := that.(HouseApplicationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	return true
}
func (this *HouseApplicationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseApplicationResponse)
	if !ok {
		that2, ok := that.(HouseApplicationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HouseReplacementRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseReplacementRequest)
	if !ok {
		that2, ok := that.(HouseReplacementRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	return true
}
func (this *HouseReplacementResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseReplacementResponse)
	if !ok {
		that2, ok := that.(HouseReplacementResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HouseReturnRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseReturnRequest)
	if !ok {
		that2, ok := that.(HouseReturnRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.UserName != that1.UserName {
		return false
	}
	return true
}
func (this *HouseReturnResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HouseReturnResponse)
	if !ok {
		that2, ok := that.(HouseReturnResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HouseApplicationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tenantMessages.HouseApplicationRequest{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "UserName: "+fmt.Sprintf("%#v", this.UserName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseApplicationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tenantMessages.HouseApplicationResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseReplacementRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tenantMessages.HouseReplacementRequest{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "UserName: "+fmt.Sprintf("%#v", this.UserName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseReplacementResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tenantMessages.HouseReplacementResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseReturnRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tenantMessages.HouseReturnRequest{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "UserName: "+fmt.Sprintf("%#v", this.UserName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HouseReturnResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tenantMessages.HouseReturnResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTenant(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HouseApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseApplicationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintTenant(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintTenant(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HouseApplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseApplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseApplicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HouseReplacementRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseReplacementRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseReplacementRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintTenant(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintTenant(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HouseReplacementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseReplacementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseReplacementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HouseReturnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseReturnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseReturnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintTenant(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintTenant(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HouseReturnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HouseReturnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HouseReturnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTenant(dAtA []byte, offset int, v uint64) int {
	offset -= sovTenant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HouseApplicationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovTenant(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *HouseApplicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HouseReplacementRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovTenant(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *HouseReplacementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HouseReturnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovTenant(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *HouseReturnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTenant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTenant(x uint64) (n int) {
	return sovTenant(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HouseApplicationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseApplicationRequest{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`UserName:` + fmt.Sprintf("%v", this.UserName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HouseApplicationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseApplicationResponse{`,
		`}`,
	}, "")
	return s
}
func (this *HouseReplacementRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseReplacementRequest{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`UserName:` + fmt.Sprintf("%v", this.UserName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HouseReplacementResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseReplacementResponse{`,
		`}`,
	}, "")
	return s
}
func (this *HouseReturnRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseReturnRequest{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`UserName:` + fmt.Sprintf("%v", this.UserName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HouseReturnResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HouseReturnResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringTenant(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HouseApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseApplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseApplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseApplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseReplacementRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseReplacementRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseReplacementRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseReplacementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseReplacementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseReplacementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseReturnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseReturnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseReturnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HouseReturnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HouseReturnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HouseReturnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTenant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTenant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTenant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTenant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTenant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTenant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTenant = fmt.Errorf("proto: unexpected end of group")
)
